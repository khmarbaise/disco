// Copyright 2021 The disco Authors. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

package cmd

import (
	"fmt"
	"github.com/schollz/progressbar/v3"
	"github.com/urfave/cli/v2"
	"time"
)

//EphemeralIds Describe
var EphemeralIds = cli.Command{
	Name:        "ephemeralids",
	Aliases:     []string{"eids", "ids"},
	Usage:       "ephemeralids .....",
	Description: "ephemeralids ....descritpion",
	Action:      ephemeralIds,
}

//AutoGenerated Result while calling REST API
type AutoGenerated struct {
	Filename          string `json:"filename"`
	DirectDownloadURI string `json:"direct_download_uri"`
	DownloadSiteURI   string `json:"download_site_uri"`
}

func ephemeralIds(ctx *cli.Context) error {

	var url = fmt.Sprintf("%s/ephemeral_ids", foojayBaseAPI)
	fmt.Println("Demo implementation.")
	fmt.Printf("URL: %s\n", url)

	oneBar := progressbar.NewOptions(1000,
		//progressbar.OptionSetWriter(ansi.NewAnsiStdout()),
		progressbar.OptionEnableColorCodes(true),
		progressbar.OptionShowBytes(true),
		progressbar.OptionSetWidth(30),
		progressbar.OptionSetDescription("[cyan][1/3][reset] Writing zulu11.39.15-ca-jdk11.0.7-linux_i686.tar.gz..."),
		progressbar.OptionSetTheme(progressbar.Theme{
			Saucer:        "[green]=[reset]",
			SaucerHead:    "[green]>[reset]",
			SaucerPadding: " ",
			BarStart:      "[",
			BarEnd:        "]",
		}))
	for i := 0; i < 1000; i++ {
		oneBar.Add(1)
		time.Sleep(5 * time.Millisecond)
	}

	oneBar.Finish()

	//req, _ := http.NewRequest("GET", "https://cdn.azul.com/zulu/bin/zulu11.39.15-ca-jdk11.0.7-linux_i686.tar.gz", nil)
	//resp, _ := http.DefaultClient.Do(req)
	//defer resp.Body.Close()
	//
	//f, _ := os.OpenFile("zulu11.39.15-ca-jdk11.0.7-linux_i686.tar.gz", os.O_CREATE|os.O_WRONLY, 0644)
	//defer f.Close()
	//
	//bar := progressbar.DefaultBytes(
	//	resp.ContentLength,
	//	"downloading zulu11.39.15-ca-jdk11.0.7-linux_i686.tar.gz...",
	//)
	//io.Copy(io.MultiWriter(f, bar), resp.Body)
	return nil
}
